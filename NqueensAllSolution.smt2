(declare-fun r0 ()
Int )
(declare-fun r1 ()
Int )
(declare-fun r2 ()
Int )
(declare-fun r3 ()
Int )
(declare-fun r4 ()
Int )
(assert (and (>= r0 0 )
(< r0 5 )
)
)
(assert (and (>= r1 0 )
(< r1 5 )
)
)
(assert (and (>= r2 0 )
(< r2 5 )
)
)
(assert (and (>= r3 0 )
(< r3 5 )
)
)
(assert (and (>= r4 0 )
(< r4 5 )
)
)
(assert (distinct r0 r1 r2 r3 r4 )
)
(define-fun diagonal-threat ((x1 Int )
(y1 Int )
(x2 Int )
(y2 Int )
)
Bool (= (abs (- x1 x2 )
)
(abs (- y1 y2 )
)
)
)
(assert (not (diagonal-threat r0 0 r1 1 )
)
)
(assert (not (diagonal-threat r0 0 r2 2 )
)
)
(assert (not (diagonal-threat r0 0 r3 3 )
)
)
(assert (not (diagonal-threat r0 0 r4 4 )
)
)
(assert (not (diagonal-threat r1 1 r2 2 )
)
)
(assert (not (diagonal-threat r1 1 r3 3 )
)
)
(assert (not (diagonal-threat r1 1 r4 4 )
)
)
(assert (not (diagonal-threat r2 2 r3 3 )
)
)
(assert (not (diagonal-threat r2 2 r4 4 )
)
)
(assert (not (diagonal-threat r3 3 r4 4 )
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-1") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-1") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_1 ()
Int 3 )
(define-fun r1_from_model_1 ()
Int 1 )
(define-fun r3_from_model_1 ()
Int 2 )
(define-fun r2_from_model_1 ()
Int 4 )
(define-fun r4_from_model_1 ()
Int 0 )
(assert (or (not (= r0 r0_from_model_1 )
)
(not (= r1 r1_from_model_1 )
)
(not (= r2 r2_from_model_1 )
)
(not (= r3 r3_from_model_1 )
)
(not (= r4 r4_from_model_1 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-2") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-2") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_2 ()
Int 2 )
(define-fun r1_from_model_2 ()
Int 0 )
(define-fun r3_from_model_2 ()
Int 1 )
(define-fun r2_from_model_2 ()
Int 3 )
(define-fun r4_from_model_2 ()
Int 4 )
(assert (or (not (= r0 r0_from_model_2 )
)
(not (= r1 r1_from_model_2 )
)
(not (= r2 r2_from_model_2 )
)
(not (= r3 r3_from_model_2 )
)
(not (= r4 r4_from_model_2 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-3") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-3") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_3 ()
Int 1 )
(define-fun r1_from_model_3 ()
Int 4 )
(define-fun r3_from_model_3 ()
Int 0 )
(define-fun r2_from_model_3 ()
Int 2 )
(define-fun r4_from_model_3 ()
Int 3 )
(assert (or (not (= r0 r0_from_model_3 )
)
(not (= r1 r1_from_model_3 )
)
(not (= r2 r2_from_model_3 )
)
(not (= r3 r3_from_model_3 )
)
(not (= r4 r4_from_model_3 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-4") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-4") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_4 ()
Int 0 )
(define-fun r1_from_model_4 ()
Int 3 )
(define-fun r3_from_model_4 ()
Int 4 )
(define-fun r2_from_model_4 ()
Int 1 )
(define-fun r4_from_model_4 ()
Int 2 )
(assert (or (not (= r0 r0_from_model_4 )
)
(not (= r1 r1_from_model_4 )
)
(not (= r2 r2_from_model_4 )
)
(not (= r3 r3_from_model_4 )
)
(not (= r4 r4_from_model_4 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-5") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-5") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_5 ()
Int 0 )
(define-fun r1_from_model_5 ()
Int 2 )
(define-fun r3_from_model_5 ()
Int 1 )
(define-fun r2_from_model_5 ()
Int 4 )
(define-fun r4_from_model_5 ()
Int 3 )
(assert (or (not (= r0 r0_from_model_5 )
)
(not (= r1 r1_from_model_5 )
)
(not (= r2 r2_from_model_5 )
)
(not (= r3 r3_from_model_5 )
)
(not (= r4 r4_from_model_5 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-6") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-6") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_6 ()
Int 1 )
(define-fun r1_from_model_6 ()
Int 3 )
(define-fun r3_from_model_6 ()
Int 2 )
(define-fun r2_from_model_6 ()
Int 0 )
(define-fun r4_from_model_6 ()
Int 4 )
(assert (or (not (= r0 r0_from_model_6 )
)
(not (= r1 r1_from_model_6 )
)
(not (= r2 r2_from_model_6 )
)
(not (= r3 r3_from_model_6 )
)
(not (= r4 r4_from_model_6 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-7") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-7") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_7 ()
Int 3 )
(define-fun r1_from_model_7 ()
Int 0 )
(define-fun r3_from_model_7 ()
Int 4 )
(define-fun r2_from_model_7 ()
Int 2 )
(define-fun r4_from_model_7 ()
Int 1 )
(assert (or (not (= r0 r0_from_model_7 )
)
(not (= r1 r1_from_model_7 )
)
(not (= r2 r2_from_model_7 )
)
(not (= r3 r3_from_model_7 )
)
(not (= r4 r4_from_model_7 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-8") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-8") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_8 ()
Int 2 )
(define-fun r1_from_model_8 ()
Int 4 )
(define-fun r3_from_model_8 ()
Int 3 )
(define-fun r2_from_model_8 ()
Int 1 )
(define-fun r4_from_model_8 ()
Int 0 )
(assert (or (not (= r0 r0_from_model_8 )
)
(not (= r1 r1_from_model_8 )
)
(not (= r2 r2_from_model_8 )
)
(not (= r3 r3_from_model_8 )
)
(not (= r4 r4_from_model_8 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-9") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-9") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_9 ()
Int 4 )
(define-fun r1_from_model_9 ()
Int 2 )
(define-fun r3_from_model_9 ()
Int 3 )
(define-fun r2_from_model_9 ()
Int 0 )
(define-fun r4_from_model_9 ()
Int 1 )
(assert (or (not (= r0 r0_from_model_9 )
)
(not (= r1 r1_from_model_9 )
)
(not (= r2 r2_from_model_9 )
)
(not (= r3 r3_from_model_9 )
)
(not (= r4 r4_from_model_9 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-10") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-10") ; used to indentify the model coverted to constraints
(define-fun r0_from_model_10 ()
Int 4 )
(define-fun r1_from_model_10 ()
Int 1 )
(define-fun r3_from_model_10 ()
Int 0 )
(define-fun r2_from_model_10 ()
Int 3 )
(define-fun r4_from_model_10 ()
Int 2 )
(assert (or (not (= r0 r0_from_model_10 )
)
(not (= r1 r1_from_model_10 )
)
(not (= r2 r2_from_model_10 )
)
(not (= r3 r3_from_model_10 )
)
(not (= r4 r4_from_model_10 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-11") ; used to indentify the model coverted to constraints
(echo "(r0 r1 r2 r3 r4)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-11") ; used to indentify the model coverted to constraints
