(declare-fun x ()
Int )
(declare-fun y ()
Int )
(assert (> x 0 )
)
(assert (> y 0 )
)
(assert (= 10 (+ x y )
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-1") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-1") ; used to indentify the model coverted to constraints
(define-fun y_from_model_1 ()
Int 1 )
(define-fun x_from_model_1 ()
Int 9 )
(assert (or (not (= x x_from_model_1 )
)
(not (= y y_from_model_1 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-2") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-2") ; used to indentify the model coverted to constraints
(define-fun x_from_model_2 ()
Int 8 )
(define-fun y_from_model_2 ()
Int 2 )
(assert (or (not (= x x_from_model_2 )
)
(not (= y y_from_model_2 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-3") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-3") ; used to indentify the model coverted to constraints
(define-fun x_from_model_3 ()
Int 7 )
(define-fun y_from_model_3 ()
Int 3 )
(assert (or (not (= x x_from_model_3 )
)
(not (= y y_from_model_3 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-4") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-4") ; used to indentify the model coverted to constraints
(define-fun x_from_model_4 ()
Int 6 )
(define-fun y_from_model_4 ()
Int 4 )
(assert (or (not (= x x_from_model_4 )
)
(not (= y y_from_model_4 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-5") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-5") ; used to indentify the model coverted to constraints
(define-fun x_from_model_5 ()
Int 5 )
(define-fun y_from_model_5 ()
Int 5 )
(assert (or (not (= x x_from_model_5 )
)
(not (= y y_from_model_5 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-6") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-6") ; used to indentify the model coverted to constraints
(define-fun x_from_model_6 ()
Int 4 )
(define-fun y_from_model_6 ()
Int 6 )
(assert (or (not (= x x_from_model_6 )
)
(not (= y y_from_model_6 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-7") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-7") ; used to indentify the model coverted to constraints
(define-fun x_from_model_7 ()
Int 3 )
(define-fun y_from_model_7 ()
Int 7 )
(assert (or (not (= x x_from_model_7 )
)
(not (= y y_from_model_7 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-8") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-8") ; used to indentify the model coverted to constraints
(define-fun x_from_model_8 ()
Int 2 )
(define-fun y_from_model_8 ()
Int 8 )
(assert (or (not (= x x_from_model_8 )
)
(not (= y y_from_model_8 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-9") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-9") ; used to indentify the model coverted to constraints
(define-fun x_from_model_9 ()
Int 1 )
(define-fun y_from_model_9 ()
Int 9 )
(assert (or (not (= x x_from_model_9 )
)
(not (= y y_from_model_9 )
)
)
)
(echo "continue-if-sat")
(check-sat )
(echo "model-to-constraint-start-10") ; used to indentify the model coverted to constraints
(echo "(x y)") ; symbols coverted to constraints
(get-model )
(echo "model-to-constraint-end-10") ; used to indentify the model coverted to constraints
